from functools import reduce
from sys import argv
from itertools import cycle, count

print('\n************* Task №1 **************')
# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

if len(argv) == 4:
    name_script, time, salary, bonus = argv
    time = int(time)
    salary = int(salary)
    bonus = int(bonus)
    res = time * salary + bonus
    print(f"Заработная плата сотрудника  {res}")
else:
    try:
        time = int(input("Введите выработку в часах: "))
        salary = int(input("Введтие зарплату: "))
        bonus = int(input("Введите бонус: "))
        res = time * salary + bonus
        print(f"Заработная плата сотрудника  {res}")
    except ValueError:
        print('Only numbers allowed')


#def salary():                   # Своя функция для наглядности в изменении
#    try:
#        time = int(input('Выработка в часах: '))
#        salary = int(input('Ставка: '))
#        bonus = int(input('Премия: '))
#        res = time * salary + bonus
#        print(f'Заработная плата сотрудника  {res}')
#    except ValueError:
#        return print('Only numbers allowed')


#salary()

print('\n************* Task №2 **************')
# 2.Представлен список чисел.
# Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

bevore_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
after_list = [bevore_list[i+1] for i in range(len(bevore_list)-1) if bevore_list[i+1] > bevore_list[i]]
print(f"Bevore: {bevore_list}")
print(f"After:  {after_list}")

#bevore_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]  # Развёрнытй вариант для наглядности в изменении для понимания использования генератора
#print(f"Bevore: {bevore_list}")
#after_list = []
#for i in range(len(bevore_list)-1):
#    if bevore_list[i+1] > bevore_list[i]:
#        after_list.append(bevore_list[i+1])


#print(f"After:  {after_list}")

print('\n************* Task №3 **************')
# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

print([i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0])

print('\n************* Task №4 **************')
# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

bevore_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11] 
print(f"Bevore: {bevore_list}")
after_list = [i for i in bevore_list if bevore_list.count(i) == 1]
print(f"After:  {after_list}")


print('\n************* Task №5 **************')
# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти
# четные числа от 100 до 1000 (включая границы).Необходимо получить результат вычис-я произве-я всех элементов списка.
# Подсказка: использовать функцию reduce().


def my_func(prev_i, i):
    return prev_i * i


print(f"Чётные значения {[i for i in range(100, 1001) if i % 2 == 0]}")
print(f'Произведение всех элементов списка {reduce(my_func, [i for i in range(100, 1001) if i % 2 == 0])}')


print('\n************* Task №6 **************')
# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл
# не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

number = int(input("Enter your number: "))
stop = number + 10                              #Методичка - страница 16
print("\t***** Variant a *****\t")
for i in count(number):                         #счётчик для разрыва цикла
    if i > stop:
        break
    else:
        print(i)



print("\t***** Variant b *****\t")
my_list = [i for i in range(stop)]              #Методичка - страница 16-17
count = 0
for i in cycle(my_list):
    if count > stop + 10:                       #счётчик для разрыва цикла
        break
    print(i)
    count += 1
   

