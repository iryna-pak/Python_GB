"""
1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который должен
 принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
Примеры матриц вы найдете в методичке.
Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix
(двух матриц). Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем
с первым элементом первой строки второй матрицы и т.д.
"""
"""
КОММЕНТАРИЙ УЧИТЕЛЯ
Задача 1. Ваш класс должен был описывать всего одну матрицу.
А вы решили в конструкторе сразу передать 2=) А если сложить нуно было 3 матрицы и более?
Тут аналогичная задача, как мы делали на уроке с векторами. Мы в классе Vector2D описывали всю логику только для
одного объекта вектор.
В вот перегруженный оператор __add__ который вызывается при попытке сложить объекты, принимает следующий атрибуты 
(self, other). Self - ссылка на наш объект, other - ссылка на объект (на другую матрицу, которую вы должны были сложить 
с текущей self).
Поэтому вам нужно было создать 2 экземпляра класса Matrix. И эти два экземпляра сложить. На выходе
 метода __add__(self, other) должна быть новая матрица. Вы решили сформировать строку (тоже неплохо).
Вы перегрузили оператор __str__. Но не вызвали и не проверили его. Вызывается метод тогда, когда мы пытаемся 
отпринтовать объект наш или сконвертировать в строковый тип данных.
Я решила проверить:

print(my_matrix)

И тогда вызываетя ваш метод __str__. И что же тут, метод не знает, что за атрибут arr у него там используется.
NameError: name 'arr' is not defined.
То есть вместо arr вам тут можно было использовать список списков вашей метрицы self.list_1.
"""


class Matrix:
    def __init__(self, list_1, list_2):
        # self.matr = [list_1, list_2]
        self.list_1 = list_1
        self.list_2 = list_2

    def __add__(self):
        arr = [[0, 0, 0],
                [0, 0, 0],
                [0, 0, 0]]

        for i in range(len(self.list_1)):
            for j in range(len(self.list_2[i])):
                arr[i][j] = self.list_1[i][j] + self.list_2[i][j]
        return str('\n'.join(['\t'.join([str(j) for j in i]) for i in arr]))

    def __str__(self):
        return str('\n'.join(['\t'.join([str(j) for j in i]) for i in arr]))


my_matrix = Matrix([[3, 5, 32], [2, 4, 6], [-1, 64, -8]],
                   [[3, 5, 8], [3, 8, 3], [7, 1, 16]])

print(my_matrix.__add__())
